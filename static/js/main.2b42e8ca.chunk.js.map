{"version":3,"sources":["components/Header.js","components/InputForm.js","components/WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Header","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Component","InputForm","Fragment","onSubmit","props","getWeather","type","name","placeholder","WeatherDisplay","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Header","components_InputForm","components_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b42e8ca.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../assets/styles/Header.css\";\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"header-h1\">\n          <i className=\"fas fa-bolt\" /> Hello, weather!\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n// import WeatherDisplay from \"./WeatherDisplay\";\nimport \"../assets/styles/InputForm.css\";\n\nexport class InputForm extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        {/* accessing the props defined earlier on app.js and making the getWeather method accessible */}\n        <form onSubmit={this.props.getWeather}>\n          <h3>Which city's weather do you want to check?</h3>\n          {/* name attribute is what we will use to fetch the values */}\n          <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n          <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n          <br />\n          {/* do I need a button? */}\n          <button>Get weather</button>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default InputForm;\n\n// Useful links for this:\n// https://blog.hellojs.org/fetching-api-data-with-react-js-460fe8bbf8f2\n// https://www.robinwieruch.de/react-fetching-data/\n\n// constructor(props) {\n//   super(props);\n//   //set initial state:\n//   this.state = {\n//     data: null\n//   };\n// }\n\n// //will use api example (hardcoded) until this worrrrrrks\n// componentDidMount() {\n\n//   fetch(\"http://jsonplaceholder.typicode.com/posts\")\n//     .then(res => res.json())\n//     .then(posts => console.log(posts));\n// }\n","import React, { Component } from \"react\";\nimport \"../assets/styles/WeatherDisplay.css\";\n\n// a stateless component could also be written without a class - and it goes like this:\nexport class WeatherDisplay extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        {/* conditional operator -> when both conditions meet, it'll render the whole JSX ONLY when button is pressed */}\n        {this.props.city && this.props.country && (\n          <h3>\n            Location: {this.props.city}, {this.props.country}\n          </h3>\n        )}\n        {this.props.temperature && (\n          <h3>Temperature: {this.props.temperature}Â°C</h3>\n        )}\n        {this.props.humidity && <h3>Humidity: {this.props.humidity}% </h3>}\n        {this.props.description && (\n          <h3>Conditions: {this.props.description} </h3>\n        )}\n        {/* and in case of error: */}\n        {this.props.error && <p className=\"error-paragraph\">{this.props.error}</p>}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WeatherDisplay;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport InputForm from \"./components/InputForm\";\nimport WeatherDisplay from \"./components/WeatherDisplay\";\n// import WeatherDisplay from \"./components/WeatherDisplay\"\nimport \"./assets/styles/App.css\";\n\nconst API_KEY = \"9ed85315e283641973f2df53aa78b4ad\";\n\nclass App extends Component {\n  //initial state\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  //this is a method\n  getWeather = async e => {\n    e.preventDefault();\n    //event object gets the value from inputform through the attributes - those variables will be dynamically passed onto the api call\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    //preventDefault -> prevents default behavior of all these components when button's clicked = object will appear\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n\n    //in here we will write our state values -- if statement to trigger the re-render only when we enter a value - else makes use of the error in case the values are incorrect\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        //undefined bc we don't need all these values if we access a false event\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a value.\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <InputForm getWeather={this.getWeather} />\n        <WeatherDisplay\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}